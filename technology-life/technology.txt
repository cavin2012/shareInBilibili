第一页：今天主要是聊聊这几年写代码的经历，个人观点，不一定对，觉得有收获那就发个弹幕；不同意观点的，就当没看见吧，哈哈！不扯了，言归正传吧

第二页：对新技术的态度：前几年与今年对比，自己感觉态度转变很大；怎么说呢？今年之前，都是大胆地使用新技术，今年开始就比较保守了。会反复地琢磨，要不要上新技术？有什么好处？弊端是什么？说的更多的词汇是权衡。做得更多的是听取组内同事的看法，自己尝试替换新技术；很多时候，坑只有踩过之后，才会知道坑的深浅

第三页：去年火什么技术？上半年的技术火什么？大家还有什么印象吗？VR？直播？AI？1，2个月前火什么技术？weex？微信小程序？现在火什么？我的理解：任何一门技术或者某个点的技术，要深入，要精通，需要花大量的时间和精力，要踩无数的坑，还有就是你踩了坑，能不能爬的出来？我倾向于程序人生（陈天）的观点，从某个细小的技术点深入，比如：TCP协议里的某个点性能优化—滑动窗口的设置，gradle的深入（更多的自动化工作），HTTP通道的安全（这是我正在做的）等等
现在JS的跨平台的解决方案开始涌现，还有就是app红利的消失，流量的入口被几大app垄断，比如：微信的小程序，我该何去何从？现在火的是andorid，iOS，但是明显感觉移动端的工作不好找，不像去年那么好找，怎么办？我是不是需要学服务端？我是不是需要补算法？我是不是需要补操作系统的知识？有必要学C或者CPP语言吗？
—需要重新整理——我的观点：守正出奇。我们现在在什么平台，就学好，学深入，学精通。未来太多未知， 但是我在现有的平台，做好，做深，做到极致，我相信：很多东西本质上是相通的，不同的是API，实现方式的不同。就拿Java来说，Java玩溜了，去玩Java服务端或者大数据，其实，只是换了一套API的环境，你怎么设计你的系统，你怎么设计你的框架，你怎么解决你的业务问题，本质上来说，Java只是一个工具。
我有很强烈地技术忧虑，有时候想，我能往前走到什么地方？我能胜任架构师吗？我需要补什么知识？有哪些新技术，我需要尝试？自己能不断地成长吗？今年的自己，比去年的自己，技术有提升吗？

第四页：为什么要提软件工程的概念啊？是因为这两天我去wiki百科上查了一下，然后呢，我也看到了自己开发过程中发现的问题，比如：我们如何看待测试？如何看待自动化测试？如何看待高质量的代码？什么样的项目结构是合理的？当我重新整理的时候，我发现，原来软件工程就是用来解决这些工程问题的学科。然后果断jd下单把那本经典的软件工程书籍买了。
刚才有提到自动化测试，其实，我个人是非常热衷自动化的。能不用人工干预就不要人工干预，能自动化就自动化。提升效率妥妥的啊！还有就是对团队的贡献，简化某些开发，提升整个团队的开发效率，比如：Base类的抽取，工具类的抽取；还有什么自动打包，自动部署，每日构建，必须上啊！
对技术要有自己的判断，不能人云亦云；自己去踩坑，去趟雷，结合自己的场景，设身处地地考虑技术是否适合，是否真正解决了你的问题

第五页：就自己的经历来看，做人比做事重要，所以我把做人放在了前头；接下来，我们就讲讲新人入职方面的事情

第六页：以下是我自己亲身经历的总结：进入新公司，前面3个月，一定要低调；在这个过程中要尊重老员工，哪怕你是大厂出来的，都一样；在这段时间，让大家看到你的技术能力，认可你的技术，认可你这个人；另外要记住的是，几个月后，你也是老员工了，so！尊重他人就是尊重自己

第七页：身边不止一个同事，觉得自己是大专出身，技术没本科的厉害；我不知道在看的直播的小伙伴们怎么考虑的，我的回答一直是：英雄不问出处！我对学历，对是不是科班，对是不是培训班出来的，对是不是做外包的，没有任何成见，talking is cheap， show me your code！同样做工程的，咱们就看各自的活做的如何，其他的都是虚的。背景，一般也就刚毕业那会儿看看，只要技术够牛逼，要够自信；想想哪些水平挫，靠自己忽悠的人拿比你高的薪资的，难道你服气？既然不服气，那干嘛不去争取？

第八页：尽量努力做到这一点！包括我自己目前还没有做到，但是我在努力做；每个月把收入（税后的）10～20%存到一张固定银行卡里，保证自己半年不上班的生活费；这是一般的做法，自己好像是考虑18个月的；理财我目前不会，但我不玩股票，个人的想法，不一定对：我每天要去看看股票那个走势，我上班都上不好，容易分心，我还是做好我的本职工作

第九页：我认为管理无处不在，既有对自己的负责，又有对团队的负责；不管怎么样，都要学，而且都要掌握好；兵熊熊一个，将熊熊一窝，这tmd是真的（说多了都是泪，不扯了）；《有效沟通》，我觉得偏向于中层管理，但是作为底层干活的员工来说，也可以学到不少东西（怎么说呢？为后面做leader 做好积累吧）；《如何突破自己的工作瓶颈》，这就是我们大家都要看的东西；
《别做正常的傻瓜》是我14年最大的收获吧，共勉！绝版了，只有pdf了。看完之后，看看自己做了多少错误的决定
群里小伙伴提供的实际问题，我个人觉得，推荐的内容已经能帮你们搞定了，如果还搞不定，那么我也没办法，我能力也有限；

第十页：先讲这些途径，然后讲—-知识的获取途径，我本人而言，是想讲文献综述的事情。我不知道大家还有多少印象。文献综述，就干了这么一件事：你选的课题是什么问题，现阶段有哪些解决方案，未来的几种解决方案如何，你怎么做，为什么？今天跟Night Farmer在群里聊，我突然意识到，什么是问题？对，就是什么是问题，这一步有多少哥们意识到了？从小的方面来讲，你的app启动的快慢是不是一个问题？crash率偏高是不是一个问题？当你确定这是一个问题的时候，后面解决问题的方法自然而然的就会找到。我这里主要想讲的一件事就是：大家做事，解决技术上的问题的时候，可以借鉴做文献综述的方式。今天跟同事讨论组件化路由的设计，我就问：现在有多少种解决方案，各有什么优劣，你要怎么做，自圆其说。

第十一页：第一条，没什么好说的；第二条，是我在这家公司的最大收获，机会不会来的很容易，来得容易的，去得也快；技术人，要耐得住寂寞，夜深人静的时候，还在看代码，在想，卧槽！这玩意儿怎么设计的，老子怎么没想到啊！今年以来，越来越看重自我驱动力；我现在尽可能得给团队提供好的方向，关键就看他们自己了。这是我无法替他们做的。我当初做过这么一件事，无聊，好奇的小伙伴们可以去试试：在随便一个招聘网站，选择15k-25k的薪资范围，看看过滤出来的岗位，把所有岗位的招聘要求都集合起来，抽取共性的和加分项；分析完，你就知道接下来要做什么吧！这是管理学的标杆法，记住哦！管理学哦

